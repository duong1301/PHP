--
-- Script was generated by Devart dbForge Studio 2020 for MySQL, Version 9.0.338.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 12/15/2023 3:43:39 PM
-- Server version: 10.4.28
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE nvduong;

--
-- Drop view `view_users`
--
DROP VIEW IF EXISTS view_users CASCADE;

--
-- Drop procedure `proc_login`
--
DROP PROCEDURE IF EXISTS proc_login;

--
-- Drop procedure `proc_user_add`
--
DROP PROCEDURE IF EXISTS proc_user_add;

--
-- Drop procedure `proc_user_avata`
--
DROP PROCEDURE IF EXISTS proc_user_avata;

--
-- Drop procedure `proc_user_del`
--
DROP PROCEDURE IF EXISTS proc_user_del;

--
-- Drop procedure `proc_user_getAll`
--
DROP PROCEDURE IF EXISTS proc_user_getAll;

--
-- Drop procedure `proc_user_getById`
--
DROP PROCEDURE IF EXISTS proc_user_getById;

--
-- Drop procedure `proc_user_update`
--
DROP PROCEDURE IF EXISTS proc_user_update;

--
-- Drop procedure `proc_user_updatePassword`
--
DROP PROCEDURE IF EXISTS proc_user_updatePassword;

--
-- Drop table `users`
--
DROP TABLE IF EXISTS users;

--
-- Drop procedure `proc_score_semesterAverage`
--
DROP PROCEDURE IF EXISTS proc_score_semesterAverage;

--
-- Drop view `view_score_semester`
--
DROP VIEW IF EXISTS view_score_semester CASCADE;

--
-- Drop procedure `proc_score_getByClass`
--
DROP PROCEDURE IF EXISTS proc_score_getByClass;

--
-- Drop procedure `proc_score_getByStudent`
--
DROP PROCEDURE IF EXISTS proc_score_getByStudent;

--
-- Drop procedure `proc_score_getBySubject`
--
DROP PROCEDURE IF EXISTS proc_score_getBySubject;

--
-- Drop view `view_score`
--
DROP VIEW IF EXISTS view_score CASCADE;

--
-- Drop view `view_score_average`
--
DROP VIEW IF EXISTS view_score_average CASCADE;

--
-- Drop procedure `proc_student_add`
--
DROP PROCEDURE IF EXISTS proc_student_add;

--
-- Drop procedure `proc_score_add`
--
DROP PROCEDURE IF EXISTS proc_score_add;

--
-- Drop procedure `proc_student_add_fakeScore`
--
DROP PROCEDURE IF EXISTS proc_student_add_fakeScore;

--
-- Drop procedure `proc_score_addFake`
--
DROP PROCEDURE IF EXISTS proc_score_addFake;

--
-- Drop procedure `proc_score_update`
--
DROP PROCEDURE IF EXISTS proc_score_update;

--
-- Drop table `scores`
--
DROP TABLE IF EXISTS scores;

--
-- Drop procedure `proc_teacherClass`
--
DROP PROCEDURE IF EXISTS proc_teacherClass;

--
-- Drop view `view_teaching`
--
DROP VIEW IF EXISTS view_teaching CASCADE;

--
-- Drop procedure `proc_class_getByTeacher`
--
DROP PROCEDURE IF EXISTS proc_class_getByTeacher;

--
-- Drop procedure `proc_class_add`
--
DROP PROCEDURE IF EXISTS proc_class_add;

--
-- Drop procedure `proc_teacherClass_add`
--
DROP PROCEDURE IF EXISTS proc_teacherClass_add;

--
-- Drop procedure `proc_teacherClass_del`
--
DROP PROCEDURE IF EXISTS proc_teacherClass_del;

--
-- Drop procedure `proc_teacherClass_update`
--
DROP PROCEDURE IF EXISTS proc_teacherClass_update;

--
-- Drop table `teacherclasses`
--
DROP TABLE IF EXISTS teacherclasses;

--
-- Drop procedure `proc_teacher_getAll`
--
DROP PROCEDURE IF EXISTS proc_teacher_getAll;

--
-- Drop procedure `proc_teacher_getById`
--
DROP PROCEDURE IF EXISTS proc_teacher_getById;

--
-- Drop view `view_teachers`
--
DROP VIEW IF EXISTS view_teachers CASCADE;

--
-- Drop procedure `proc_login_teacher`
--
DROP PROCEDURE IF EXISTS proc_login_teacher;

--
-- Drop procedure `proc_teacher_add`
--
DROP PROCEDURE IF EXISTS proc_teacher_add;

--
-- Drop procedure `proc_teacher_avata`
--
DROP PROCEDURE IF EXISTS proc_teacher_avata;

--
-- Drop procedure `proc_teacher_del`
--
DROP PROCEDURE IF EXISTS proc_teacher_del;

--
-- Drop procedure `proc_teacher_update`
--
DROP PROCEDURE IF EXISTS proc_teacher_update;

--
-- Drop procedure `proc_teacher_updatePassword`
--
DROP PROCEDURE IF EXISTS proc_teacher_updatePassword;

--
-- Drop table `teachers`
--
DROP TABLE IF EXISTS teachers;

--
-- Drop view `view_subjects`
--
DROP VIEW IF EXISTS view_subjects CASCADE;

--
-- Drop procedure `proc_subject_add`
--
DROP PROCEDURE IF EXISTS proc_subject_add;

--
-- Drop procedure `proc_subject_del`
--
DROP PROCEDURE IF EXISTS proc_subject_del;

--
-- Drop procedure `proc_subject_getAll`
--
DROP PROCEDURE IF EXISTS proc_subject_getAll;

--
-- Drop table `subjects`
--
DROP TABLE IF EXISTS subjects;

--
-- Drop procedure `proc_class_getAll`
--
DROP PROCEDURE IF EXISTS proc_class_getAll;

--
-- Drop procedure `proc_class_getWithGrade`
--
DROP PROCEDURE IF EXISTS proc_class_getWithGrade;

--
-- Drop view `view_classes`
--
DROP VIEW IF EXISTS view_classes CASCADE;

--
-- Drop procedure `proc_student_class`
--
DROP PROCEDURE IF EXISTS proc_student_class;

--
-- Drop view `view_student`
--
DROP VIEW IF EXISTS view_student CASCADE;

--
-- Drop procedure `proc_student_del`
--
DROP PROCEDURE IF EXISTS proc_student_del;

--
-- Drop procedure `proc_student_getById`
--
DROP PROCEDURE IF EXISTS proc_student_getById;

--
-- Drop procedure `proc_student_update`
--
DROP PROCEDURE IF EXISTS proc_student_update;

--
-- Drop table `students`
--
DROP TABLE IF EXISTS students;

--
-- Drop procedure `proc_class_del`
--
DROP PROCEDURE IF EXISTS proc_class_del;

--
-- Drop procedure `proc_class_getById`
--
DROP PROCEDURE IF EXISTS proc_class_getById;

--
-- Drop table `classes`
--
DROP TABLE IF EXISTS classes;

--
-- Set default database
--
USE nvduong;

--
-- Create table `classes`
--
CREATE TABLE classes (
  classId varchar(36) NOT NULL DEFAULT '',
  name varchar(10) NOT NULL DEFAULT '',
  schoolYear int(11) NOT NULL,
  PRIMARY KEY (classId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 3640,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create index `UNIQUE_name_schoolYear` on table `classes`
--
ALTER TABLE classes
ADD UNIQUE INDEX UNIQUE_name_schoolYear (name, schoolYear);

DELIMITER $$

--
-- Create procedure `proc_class_getById`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_class_getById (IN classId char(36))
BEGIN
  SELECT
    c.classId,
    c.name,
    c.schoolYear,
    c.schoolYear + 3 AS 'schoolYearEnd'
  FROM classes c
  WHERE c.classId = classId;
END
$$

--
-- Create procedure `proc_class_del`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_class_del (IN classId char(36))
BEGIN
  DELETE
    FROM classes
  WHERE classes.classId = classId;
END
$$

DELIMITER ;

--
-- Create table `students`
--
CREATE TABLE students (
  studentId char(36) NOT NULL DEFAULT '',
  firstName varchar(50) NOT NULL DEFAULT '',
  lastName varchar(50) NOT NULL DEFAULT '',
  classId char(36) NOT NULL DEFAULT '',
  dob date DEFAULT NULL,
  studentCode int(6) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  admissionYear smallint(6) DEFAULT NULL,
  fatherName varchar(50) DEFAULT NULL,
  fatherPhone varchar(20) DEFAULT NULL,
  motherName varchar(50) DEFAULT NULL,
  motherPhone varchar(20) DEFAULT NULL,
  ethnic varchar(20) DEFAULT NULL,
  fatherJob varchar(50) DEFAULT NULL,
  motherJob varchar(50) DEFAULT NULL,
  PRIMARY KEY (studentCode)
)
ENGINE = INNODB,
AUTO_INCREMENT = 163,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create index `studentId` on table `students`
--
ALTER TABLE students
ADD UNIQUE INDEX studentId (studentId);

--
-- Create foreign key
--
ALTER TABLE students
ADD CONSTRAINT FK_students_classId FOREIGN KEY (classId)
REFERENCES classes (classId);

DELIMITER $$

--
-- Create procedure `proc_student_update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_student_update (IN studentId char(36), IN firstName varchar(50), IN lastName varchar(50), IN dob date, IN ethnic varchar(20), IN fatherName varchar(50), IN fatherPhone varchar(20), IN fatherJob varchar(20), IN motherName varchar(50), IN motherPhone varchar(20), IN motherJob varchar(20), IN classId char(36))
BEGIN
  UPDATE students s
  SET s.firstName = firstName,
      s.lastName = lastName,
      s.classId = classId,
      s.dob = dob,
      s.fatherName = fatherName,
      s.fatherPhone = fatherPhone,
      s.motherName = motherName,
      s.motherPhone = motherPhone,
      s.ethnic = ethnic,
      s.fatherJob = fatherJob,
      s.motherJob = motherJob
  WHERE s.studentId = studentId;
  SELECT
    *
  FROM students s
  WHERE s.studentId = studentId;

END
$$

--
-- Create procedure `proc_student_getById`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_student_getById (IN studentId varchar(255))
BEGIN
  SELECT
    s.studentId,
    s.firstName,
    s.lastName,
    CONCAT(s.lastName, ' ', s.firstName) AS fullName,
    s.classId,
    s.dob,
    s.studentCode,
    s.admissionYear,
    s.fatherName,
    s.fatherPhone,
    s.motherName,
    s.motherPhone,
    s.ethnic,
    s.fatherJob,
    s.motherJob
  FROM students s
  WHERE s.studentId = studentId;
END
$$

--
-- Create procedure `proc_student_del`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_student_del (IN studentId char(36))
BEGIN
  DELETE
    FROM students
  WHERE students.studentId = studentId;
END
$$

DELIMITER ;

--
-- Create view `view_student`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_student
AS
SELECT
  `s`.`studentId` AS `studentId`,
  `s`.`firstName` AS `firstName`,
  `s`.`lastName` AS `lastName`,
  `s`.`classId` AS `classId`,
  `s`.`dob` AS `dob`,
  `s`.`studentCode` AS `studentCode`,
  `s`.`admissionYear` AS `admissionYear`,
  `s`.`fatherName` AS `fatherName`,
  `s`.`fatherPhone` AS `fatherPhone`,
  `s`.`motherName` AS `motherName`,
  `s`.`motherPhone` AS `motherPhone`,
  `s`.`ethnic` AS `ethnic`,
  `s`.`fatherJob` AS `fatherJob`,
  `s`.`motherJob` AS `motherJob`,
  CONCAT(`s`.`lastName`, ' ', `s`.`firstName`) AS `fullname`,
  `c`.`name` AS `name`,
  `c`.`schoolYear` AS `schoolYear`
FROM (`students` `s`
  LEFT JOIN `classes` `c`
    ON (`s`.`classId` = `c`.`classId`));

DELIMITER $$

--
-- Create procedure `proc_student_class`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_student_class (IN classId char(36))
BEGIN
  SELECT
    *
  FROM view_student vs
  WHERE vs.classId = classId
  ORDER BY firstName ASC;
END
$$

DELIMITER ;

--
-- Create view `view_classes`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_classes
AS
SELECT
  `c`.`classId` AS `classId`,
  `c`.`name` AS `name`,
  `c`.`schoolYear` AS `schoolYear`,
  `c`.`schoolYear` + 3 AS `schoolYearEnd`,
  COUNT(`s`.`studentId`) AS `qlt`
FROM (`classes` `c`
  LEFT JOIN `students` `s`
    ON (`c`.`classId` = `s`.`classId`))
GROUP BY `c`.`classId`
ORDER BY `c`.`schoolYear` DESC;

DELIMITER $$

--
-- Create procedure `proc_class_getWithGrade`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_class_getWithGrade (IN schoolYear int)
BEGIN
  SELECT
    vc.classId,
    vc.name,
    vc.schoolYear,
    vc.schoolYearEnd,
    vc.qlt,
    schoolYear - vc.schoolYear + 10 AS grade
  FROM view_classes AS vc
  WHERE vc.schoolYear BETWEEN schoolYear - 2 AND schoolYear
  ORDER BY grade, vc.name
  ;
END
$$

--
-- Create procedure `proc_class_getAll`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_class_getAll ()
BEGIN
  SELECT
    *
  FROM view_classes vc;
END
$$

DELIMITER ;

--
-- Create table `subjects`
--
CREATE TABLE subjects (
  subjectId char(3) NOT NULL DEFAULT '' COMMENT 'id môn học',
  subjectCode varchar(10) NOT NULL DEFAULT '' COMMENT 'mã môn học',
  name varchar(50) NOT NULL DEFAULT '' COMMENT 'tên môn học',
  type smallint(6) DEFAULT 0 COMMENT 'type = 0 tính diểm; type = 1 điều kiện',
  PRIMARY KEY (subjectId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 1489,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create index `subjectCode` on table `subjects`
--
ALTER TABLE subjects
ADD UNIQUE INDEX subjectCode (subjectCode);

DELIMITER $$

--
-- Create procedure `proc_subject_getAll`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_subject_getAll ()
BEGIN
  SELECT
    *
  FROM subjects s;

END
$$

--
-- Create procedure `proc_subject_del`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_subject_del (IN subjectId char(36))
BEGIN
  DELETE
    FROM subjects
  WHERE subjects.subjectId = subjectId;
END
$$

--
-- Create procedure `proc_subject_add`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_subject_add (IN subjectCode varchar(10), IN name varchar(50), IN type smallint)
BEGIN

  INSERT INTO subjects (subjectId, subjectCode, name, type, subjectCode)
    VALUES (UUID(), subjectCode, name, type);
END
$$

DELIMITER ;

--
-- Create view `view_subjects`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_subjects
AS
SELECT
  `s`.`subjectId` AS `subjectId`,
  `s`.`subjectCode` AS `subjectCode`,
  `s`.`name` AS `name`,
  `s`.`type` AS `type`
FROM `subjects` `s`;

--
-- Create table `teachers`
--
CREATE TABLE teachers (
  teacherId char(36) NOT NULL DEFAULT '',
  firstName varchar(50) DEFAULT NULL,
  lastName varchar(50) DEFAULT NULL,
  phone varchar(50) NOT NULL DEFAULT '',
  email varchar(50) NOT NULL DEFAULT '',
  subjectId char(3) DEFAULT NULL,
  teacherCode int(3) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  password varchar(50) NOT NULL DEFAULT '123456',
  avata varchar(40) DEFAULT NULL,
  PRIMARY KEY (teacherCode)
)
ENGINE = INNODB,
AUTO_INCREMENT = 106,
AVG_ROW_LENGTH = 1024,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create index `email` on table `teachers`
--
ALTER TABLE teachers
ADD UNIQUE INDEX email (email);

--
-- Create index `phone` on table `teachers`
--
ALTER TABLE teachers
ADD UNIQUE INDEX phone (phone);

--
-- Create index `teacherId` on table `teachers`
--
ALTER TABLE teachers
ADD UNIQUE INDEX teacherId (teacherId);

--
-- Create foreign key
--
ALTER TABLE teachers
ADD CONSTRAINT FK_teachers_subjectId FOREIGN KEY (subjectId)
REFERENCES subjects (subjectId);

DELIMITER $$

--
-- Create procedure `proc_teacher_updatePassword`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_teacher_updatePassword (IN teacherId char(36), IN newPassword varchar(50), IN oldPassword varchar(50))
BEGIN
  UPDATE teachers t
  SET password = newPassword
  WHERE t.teacherId = teacherId
  AND t.password = oldPassword;
END
$$

--
-- Create procedure `proc_teacher_update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_teacher_update (IN teacherId char(36), IN lastName varchar(50), IN firstName varchar(50), IN phone varchar(20), IN email varchar(50))
BEGIN
  UPDATE teachers t
  SET t.firstName = firstName,
      t.lastName = lastName,
      t.phone = phone,
      t.email = email
  WHERE t.teacherId = teacherId;
END
$$

--
-- Create procedure `proc_teacher_del`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_teacher_del (IN teacherId char(36))
BEGIN
  DELETE
    FROM teachers
  WHERE teachers.teacherId = teacherId;
END
$$

--
-- Create procedure `proc_teacher_avata`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_teacher_avata (IN teacherId char(36), IN avata varchar(50))
BEGIN
  UPDATE teachers t
  SET t.avata = avata
  WHERE t.teacherId = teacherId;
END
$$

--
-- Create procedure `proc_teacher_add`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_teacher_add (IN firstName varchar(50), IN lastName varchar(50), IN phone varchar(20), IN email varchar(50), IN subjectId char(3))
BEGIN
  INSERT INTO teachers (teacherId, firstName, lastName, phone, email, subjectId)
    VALUES (UUID(), firstName, lastName, phone, email, subjectId);
END
$$

--
-- Create procedure `proc_login_teacher`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_login_teacher (IN login varchar(50), IN password varchar(50))
BEGIN
  SELECT
    *
  FROM teachers t
  WHERE (login = t.email
  OR login = t.phone)
  AND password = t.password
  ;
END
$$

DELIMITER ;

--
-- Create view `view_teachers`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_teachers
AS
SELECT
  `t`.`teacherId` AS `teacherId`,
  `t`.`firstName` AS `firstName`,
  `t`.`lastName` AS `lastName`,
  CONCAT(`t`.`lastName`, ' ', `t`.`firstName`) AS `fullname`,
  `t`.`phone` AS `phone`,
  `t`.`email` AS `email`,
  `t`.`subjectId` AS `subjectId`,
  `t`.`teacherCode` AS `teacherCode`,
  `s`.`name` AS `subjectName`,
  `t`.`password` AS `password`,
  `t`.`avata` AS `avata`
FROM (`teachers` `t`
  LEFT JOIN `subjects` `s`
    ON (`t`.`subjectId` = `s`.`subjectId`));

DELIMITER $$

--
-- Create procedure `proc_teacher_getById`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_teacher_getById (IN teacherId char(36))
BEGIN
  SELECT
    *
  FROM view_teachers vt
  WHERE vt.teacherId = teacherId;
END
$$

--
-- Create procedure `proc_teacher_getAll`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_teacher_getAll ()
BEGIN
  SELECT
    *
  FROM view_teachers vt;
END
$$

DELIMITER ;

--
-- Create table `teacherclasses`
--
CREATE TABLE teacherclasses (
  classId char(36) NOT NULL DEFAULT '',
  teacherId char(36) DEFAULT NULL,
  semester int(11) NOT NULL,
  year int(11) NOT NULL,
  subjectId char(3) DEFAULT NULL
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 140,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create index `UK_teacherclasses` on table `teacherclasses`
--
ALTER TABLE teacherclasses
ADD UNIQUE INDEX UK_teacherclasses (classId, semester, year, subjectId);

--
-- Create foreign key
--
ALTER TABLE teacherclasses
ADD CONSTRAINT FK_teacherclasses_classId FOREIGN KEY (classId)
REFERENCES classes (classId) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE teacherclasses
ADD CONSTRAINT FK_teacherclasses_subjectId FOREIGN KEY (subjectId)
REFERENCES subjects (subjectId) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE teacherclasses
ADD CONSTRAINT FK_teacherclasses_teacherId FOREIGN KEY (teacherId)
REFERENCES teachers (teacherId) ON DELETE SET NULL ON UPDATE SET NULL;

DELIMITER $$

--
-- Create procedure `proc_teacherClass_update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_teacherClass_update (IN teacherId char(36), IN classId char(36), IN semester smallint, IN year smallint, IN subjectId char(3))
BEGIN

  UPDATE teacherclasses t
  SET t.teacherId = teacherId
  WHERE t.classId = classId
  AND t.semester = semester
  AND t.year = year
  AND t.subjectId = subjectId;
END
$$

--
-- Create procedure `proc_teacherClass_del`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_teacherClass_del (IN teacherId char(36), IN classId char(36))
BEGIN
  DELETE
    FROM teacherclasses
  WHERE (teacherclasses.teacherId = teacherId
    && teacherclasses.classId = classId);
END
$$

--
-- Create procedure `proc_teacherClass_add`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_teacherClass_add (IN teacherId char(36), IN classId char(36), IN semester smallint, IN year smallint)
BEGIN
  INSERT INTO teacherclasses (classId, teacherId, semester, year, subjectId)
    VALUES (classId, NULL, semester, year, 's01'),
    (classId, NULL, semester, year, 's02'),
    (classId, NULL, semester, year, 's03'),
    (classId, NULL, semester, year, 's04'),
    (classId, NULL, semester, year, 's05'),
    (classId, NULL, semester, year, 's06'),
    (classId, NULL, semester, year, 's07'),
    (classId, NULL, semester, year, 's08'),
    (classId, NULL, semester, year, 's09'),
    (classId, NULL, semester, year, 's10'),
    (classId, NULL, semester, year, 's11'),
    (classId, NULL, semester, year, 's12'),
    (classId, NULL, semester, year, 's13');
END
$$

--
-- Create procedure `proc_class_add`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_class_add (IN name varchar(50), IN schoolYear int)
BEGIN
  SET @classId := UUID();
  INSERT INTO classes (classId, name, schoolYear)
    VALUES (@classId, name, schoolYear);
  CALL proc_teacherClass_add(NULL, @classId, 1, 1);
  CALL proc_teacherClass_add(NULL, @classId, 2, 1);
  CALL proc_teacherClass_add(NULL, @classId, 1, 2);
  CALL proc_teacherClass_add(NULL, @classId, 2, 2);
  CALL proc_teacherClass_add(NULL, @classId, 1, 3);
  CALL proc_teacherClass_add(NULL, @classId, 2, 3);
END
$$

--
-- Create procedure `proc_class_getByTeacher`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_class_getByTeacher (IN teacherId char(36), IN schoolYear int, IN semester smallint)
BEGIN
  SELECT
    t.classId,
    t.teacherId,
    t.semester,
    t.year,
    t.subjectId,
    c.classId,
    c.name,
    c.schoolYear,
    t1.teacherId,
    schoolYear - c.schoolYear + 1 AS test,
    schoolYear - c.schoolYear + 10 AS grade
  FROM teacherclasses t
    LEFT JOIN classes c
      ON t.classId = c.classId
    LEFT JOIN teachers t1
      ON t.teacherId = t1.teacherId
  WHERE t1.teacherId = teacherId
  AND t.semester = semester
  AND t.year = schoolYear - c.schoolYear + 1
  ;
END
$$

DELIMITER ;

--
-- Create view `view_teaching`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_teaching
AS
SELECT
  `t`.`firstName` AS `firstName`,
  `t`.`lastName` AS `lastName`,
  CONCAT(`t`.`lastName`, ' ', `t`.`firstName`) AS `fullName`,
  `t`.`phone` AS `phone`,
  `t`.`email` AS `email`,
  `t`.`subjectId` AS `subjectId`,
  `t`.`teacherCode` AS `teacherCode`,
  `s`.`subjectCode` AS `subjectCode`,
  `s`.`name` AS `name`,
  `s`.`type` AS `type`,
  `teacherclasses`.`classId` AS `classId`,
  `teacherclasses`.`teacherId` AS `teacherId`,
  `teacherclasses`.`semester` AS `semester`,
  `teacherclasses`.`year` AS `year`
FROM (`subjects` `s`
  JOIN (`teacherclasses`
    JOIN `teachers` `t`
      ON (`teacherclasses`.`teacherId` = `t`.`teacherId`))
    ON (`t`.`subjectId` = `s`.`subjectId`));

DELIMITER $$

--
-- Create procedure `proc_teacherClass`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_teacherClass (IN classId char(36), IN semester smallint, IN year smallint)
BEGIN
  IF (semester = 0) THEN
    SELECT
      *
    FROM view_teaching vt
    WHERE vt.classId = classId
    AND vt.year = year;
  ELSE
    SELECT
      *
    FROM view_teaching vt
    WHERE vt.classId = classId
    AND vt.year = year
    AND vt.semester = semester;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `scores`
--
CREATE TABLE scores (
  studentId char(36) NOT NULL DEFAULT '',
  classId char(36) NOT NULL DEFAULT '',
  subjectId char(3) NOT NULL DEFAULT '',
  semester smallint(6) NOT NULL,
  oralTest float DEFAULT 0,
  fifTest1 float DEFAULT 0,
  fifTest2 float DEFAULT 0,
  periodTest1 float DEFAULT 0,
  periodTest2 float DEFAULT 0,
  finalTest float DEFAULT NULL,
  year int(11) NOT NULL
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 262,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create check constraint
--
ALTER TABLE scores
ADD CONSTRAINT CK_scores CHECK (`year` BETWEEN 1 AND 3);

--
-- Create index `UK_scores` on table `scores`
--
ALTER TABLE scores
ADD UNIQUE INDEX UK_scores (studentId, classId, subjectId, semester, year);

--
-- Create foreign key
--
ALTER TABLE scores
ADD CONSTRAINT FK_scores_classId FOREIGN KEY (classId)
REFERENCES classes (classId);

--
-- Create foreign key
--
ALTER TABLE scores
ADD CONSTRAINT FK_scores_studentId FOREIGN KEY (studentId)
REFERENCES students (studentId) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE scores
ADD CONSTRAINT FK_scores_subjectId FOREIGN KEY (subjectId)
REFERENCES subjects (subjectId);

DELIMITER $$

--
-- Create procedure `proc_score_update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_score_update (IN studentId char(36), IN classId char(36), IN subjectId char(3), IN year smallint, IN semester smallint, IN oralTest float, IN fifTest1 float, IN fifTest2 float, IN periodTest1 float, IN periodTest2 float, IN finalTest float)
BEGIN
  UPDATE scores s
  SET s.oralTest = oralTest,
      s.fifTest1 = fifTest1,
      s.fifTest2 = fifTest2,
      s.periodTest1 = periodTest1,
      s.periodTest2 = periodTest2,
      s.finalTest = finalTest
  WHERE s.studentId = studentId
  AND s.classId = classId
  AND s.subjectId = subjectId
  AND s.year = year
  AND s.semester = semester;
END
$$

--
-- Create procedure `proc_score_addFake`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_score_addFake (IN studentId char(36), IN classId char(36), IN subjectId char(3), IN semester smallint, IN year int)
BEGIN
  INSERT INTO scores (studentId, classId, subjectId, semester, oralTest, fifTest1, fifTest2, periodTest1, periodTest2, finalTest, year)
    VALUES (studentId, classId, subjectId, semester, FLOOR(RAND() * 10 + 1), FLOOR(RAND() * 10 + 1), FLOOR(RAND() * 10 + 1), FLOOR(RAND() * 10 + 1), FLOOR(RAND() * 10 + 1), FLOOR(RAND() * 10 + 1), year);
END
$$

--
-- Create procedure `proc_student_add_fakeScore`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_student_add_fakeScore (IN firstName varchar(50), IN lastName varchar(50), IN ethnic varchar(20), IN classId char(36), IN dob date, IN fatherName varchar(50), IN fatherPhone varchar(50), IN fatherJob varchar(50), IN motherName varchar(50), IN motherPhone varchar(50), IN motherJob varchar(50))
BEGIN
  SET @ID := UUID();
  INSERT INTO students (studentId, firstName, lastName, classId, dob, admissionYear, fatherName, fatherPhone, motherName, motherPhone, ethnic, fatherJob, motherJob)
    VALUES (@ID, firstName, lastName, classId, dob, 0, fatherName, fatherPhone, motherName, motherPhone, ethnic, fatherJob, motherJob);
  CALL proc_score_addFake(@ID, classId, 's01', 1, 1);
  CALL proc_score_addFake(@ID, classId, 's02', 1, 1);
  CALL proc_score_addFake(@ID, classId, 's03', 1, 1);
  CALL proc_score_addFake(@ID, classId, 's04', 1, 1);
  CALL proc_score_addFake(@ID, classId, 's05', 1, 1);
  CALL proc_score_addFake(@ID, classId, 's06', 1, 1);
  CALL proc_score_addFake(@ID, classId, 's07', 1, 1);
  CALL proc_score_addFake(@ID, classId, 's08', 1, 1);
  CALL proc_score_addFake(@ID, classId, 's09', 1, 1);
  CALL proc_score_addFake(@ID, classId, 's10', 1, 1);
  CALL proc_score_addFake(@ID, classId, 's11', 1, 1);
  CALL proc_score_addFake(@ID, classId, 's12', 1, 1);
  CALL proc_score_addFake(@ID, classId, 's13', 1, 1);

  CALL proc_score_addFake(@ID, classId, 's01', 2, 1);
  CALL proc_score_addFake(@ID, classId, 's02', 2, 1);
  CALL proc_score_addFake(@ID, classId, 's03', 2, 1);
  CALL proc_score_addFake(@ID, classId, 's04', 2, 1);
  CALL proc_score_addFake(@ID, classId, 's05', 2, 1);
  CALL proc_score_addFake(@ID, classId, 's06', 2, 1);
  CALL proc_score_addFake(@ID, classId, 's07', 2, 1);
  CALL proc_score_addFake(@ID, classId, 's08', 2, 1);
  CALL proc_score_addFake(@ID, classId, 's09', 2, 1);
  CALL proc_score_addFake(@ID, classId, 's10', 2, 1);
  CALL proc_score_addFake(@ID, classId, 's11', 2, 1);
  CALL proc_score_addFake(@ID, classId, 's12', 2, 1);
  CALL proc_score_addFake(@ID, classId, 's13', 2, 1);

  CALL proc_score_addFake(@ID, classId, 's01', 1, 2);
  CALL proc_score_addFake(@ID, classId, 's02', 1, 2);
  CALL proc_score_addFake(@ID, classId, 's03', 1, 2);
  CALL proc_score_addFake(@ID, classId, 's04', 1, 2);
  CALL proc_score_addFake(@ID, classId, 's05', 1, 2);
  CALL proc_score_addFake(@ID, classId, 's06', 1, 2);
  CALL proc_score_addFake(@ID, classId, 's07', 1, 2);
  CALL proc_score_addFake(@ID, classId, 's08', 1, 2);
  CALL proc_score_addFake(@ID, classId, 's09', 1, 2);
  CALL proc_score_addFake(@ID, classId, 's10', 1, 2);
  CALL proc_score_addFake(@ID, classId, 's11', 1, 2);
  CALL proc_score_addFake(@ID, classId, 's12', 1, 2);
  CALL proc_score_addFake(@ID, classId, 's13', 1, 2);

  CALL proc_score_addFake(@ID, classId, 's01', 2, 2);
  CALL proc_score_addFake(@ID, classId, 's02', 2, 2);
  CALL proc_score_addFake(@ID, classId, 's03', 2, 2);
  CALL proc_score_addFake(@ID, classId, 's04', 2, 2);
  CALL proc_score_addFake(@ID, classId, 's05', 2, 2);
  CALL proc_score_addFake(@ID, classId, 's06', 2, 2);
  CALL proc_score_addFake(@ID, classId, 's07', 2, 2);
  CALL proc_score_addFake(@ID, classId, 's08', 2, 2);
  CALL proc_score_addFake(@ID, classId, 's09', 2, 2);
  CALL proc_score_addFake(@ID, classId, 's10', 2, 2);
  CALL proc_score_addFake(@ID, classId, 's11', 2, 2);
  CALL proc_score_addFake(@ID, classId, 's12', 2, 2);
  CALL proc_score_addFake(@ID, classId, 's13', 2, 2);

  CALL proc_score_addFake(@ID, classId, 's01', 1, 3);
  CALL proc_score_addFake(@ID, classId, 's02', 1, 3);
  CALL proc_score_addFake(@ID, classId, 's03', 1, 3);
  CALL proc_score_addFake(@ID, classId, 's04', 1, 3);
  CALL proc_score_addFake(@ID, classId, 's05', 1, 3);
  CALL proc_score_addFake(@ID, classId, 's06', 1, 3);
  CALL proc_score_addFake(@ID, classId, 's07', 1, 3);
  CALL proc_score_addFake(@ID, classId, 's08', 1, 3);
  CALL proc_score_addFake(@ID, classId, 's09', 1, 3);
  CALL proc_score_addFake(@ID, classId, 's10', 1, 3);
  CALL proc_score_addFake(@ID, classId, 's11', 1, 3);
  CALL proc_score_addFake(@ID, classId, 's12', 1, 3);
  CALL proc_score_addFake(@ID, classId, 's13', 1, 3);

  CALL proc_score_addFake(@ID, classId, 's01', 2, 3);
  CALL proc_score_addFake(@ID, classId, 's02', 2, 3);
  CALL proc_score_addFake(@ID, classId, 's03', 2, 3);
  CALL proc_score_addFake(@ID, classId, 's04', 2, 3);
  CALL proc_score_addFake(@ID, classId, 's05', 2, 3);
  CALL proc_score_addFake(@ID, classId, 's06', 2, 3);
  CALL proc_score_addFake(@ID, classId, 's07', 2, 3);
  CALL proc_score_addFake(@ID, classId, 's08', 2, 3);
  CALL proc_score_addFake(@ID, classId, 's09', 2, 3);
  CALL proc_score_addFake(@ID, classId, 's10', 2, 3);
  CALL proc_score_addFake(@ID, classId, 's11', 2, 3);
  CALL proc_score_addFake(@ID, classId, 's12', 2, 3);
  CALL proc_score_addFake(@ID, classId, 's13', 2, 3);

END
$$

--
-- Create procedure `proc_score_add`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_score_add (IN studentId char(36), IN classId char(36), IN subjectId char(3), IN semester smallint, IN year int)
BEGIN
  INSERT INTO scores (studentId, classId, subjectId, semester, oralTest, fifTest1, fifTest2, periodTest1, periodTest2, finalTest, year)
    VALUES (studentId, classId, subjectId, semester, NULL, NULL, NULL, NULL, NULL, NULL, year);
END
$$

--
-- Create procedure `proc_student_add`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_student_add (IN firstName varchar(50), IN lastName varchar(50), IN ethnic varchar(20), IN classId char(36), IN dob date, IN fatherName varchar(50), IN fatherPhone varchar(50), IN fatherJob varchar(50), IN motherName varchar(50), IN motherPhone varchar(50), IN motherJob varchar(50))
BEGIN
  SET @ID := UUID();
  INSERT INTO students (studentId, firstName, lastName, classId, dob, admissionYear, fatherName, fatherPhone, motherName, motherPhone, ethnic, fatherJob, motherJob)
    VALUES (@ID, firstName, lastName, classId, dob, 0, fatherName, fatherPhone, motherName, motherPhone, ethnic, fatherJob, motherJob);
  CALL proc_score_add(@ID, classId, 's01', 1, 1);
  CALL proc_score_add(@ID, classId, 's02', 1, 1);
  CALL proc_score_add(@ID, classId, 's03', 1, 1);
  CALL proc_score_add(@ID, classId, 's04', 1, 1);
  CALL proc_score_add(@ID, classId, 's05', 1, 1);
  CALL proc_score_add(@ID, classId, 's06', 1, 1);
  CALL proc_score_add(@ID, classId, 's07', 1, 1);
  CALL proc_score_add(@ID, classId, 's08', 1, 1);
  CALL proc_score_add(@ID, classId, 's09', 1, 1);
  CALL proc_score_add(@ID, classId, 's10', 1, 1);
  CALL proc_score_add(@ID, classId, 's11', 1, 1);
  CALL proc_score_add(@ID, classId, 's12', 1, 1);
  CALL proc_score_add(@ID, classId, 's13', 1, 1);

  CALL proc_score_add(@ID, classId, 's01', 2, 1);
  CALL proc_score_add(@ID, classId, 's02', 2, 1);
  CALL proc_score_add(@ID, classId, 's03', 2, 1);
  CALL proc_score_add(@ID, classId, 's04', 2, 1);
  CALL proc_score_add(@ID, classId, 's05', 2, 1);
  CALL proc_score_add(@ID, classId, 's06', 2, 1);
  CALL proc_score_add(@ID, classId, 's07', 2, 1);
  CALL proc_score_add(@ID, classId, 's08', 2, 1);
  CALL proc_score_add(@ID, classId, 's09', 2, 1);
  CALL proc_score_add(@ID, classId, 's10', 2, 1);
  CALL proc_score_add(@ID, classId, 's11', 2, 1);
  CALL proc_score_add(@ID, classId, 's12', 2, 1);
  CALL proc_score_add(@ID, classId, 's13', 2, 1);

  CALL proc_score_add(@ID, classId, 's01', 1, 2);
  CALL proc_score_add(@ID, classId, 's02', 1, 2);
  CALL proc_score_add(@ID, classId, 's03', 1, 2);
  CALL proc_score_add(@ID, classId, 's04', 1, 2);
  CALL proc_score_add(@ID, classId, 's05', 1, 2);
  CALL proc_score_add(@ID, classId, 's06', 1, 2);
  CALL proc_score_add(@ID, classId, 's07', 1, 2);
  CALL proc_score_add(@ID, classId, 's08', 1, 2);
  CALL proc_score_add(@ID, classId, 's09', 1, 2);
  CALL proc_score_add(@ID, classId, 's10', 1, 2);
  CALL proc_score_add(@ID, classId, 's11', 1, 2);
  CALL proc_score_add(@ID, classId, 's12', 1, 2);
  CALL proc_score_add(@ID, classId, 's13', 1, 2);

  CALL proc_score_add(@ID, classId, 's01', 2, 2);
  CALL proc_score_add(@ID, classId, 's02', 2, 2);
  CALL proc_score_add(@ID, classId, 's03', 2, 2);
  CALL proc_score_add(@ID, classId, 's04', 2, 2);
  CALL proc_score_add(@ID, classId, 's05', 2, 2);
  CALL proc_score_add(@ID, classId, 's06', 2, 2);
  CALL proc_score_add(@ID, classId, 's07', 2, 2);
  CALL proc_score_add(@ID, classId, 's08', 2, 2);
  CALL proc_score_add(@ID, classId, 's09', 2, 2);
  CALL proc_score_add(@ID, classId, 's10', 2, 2);
  CALL proc_score_add(@ID, classId, 's11', 2, 2);
  CALL proc_score_add(@ID, classId, 's12', 2, 2);
  CALL proc_score_add(@ID, classId, 's13', 2, 2);

  CALL proc_score_add(@ID, classId, 's01', 1, 3);
  CALL proc_score_add(@ID, classId, 's02', 1, 3);
  CALL proc_score_add(@ID, classId, 's03', 1, 3);
  CALL proc_score_add(@ID, classId, 's04', 1, 3);
  CALL proc_score_add(@ID, classId, 's05', 1, 3);
  CALL proc_score_add(@ID, classId, 's06', 1, 3);
  CALL proc_score_add(@ID, classId, 's07', 1, 3);
  CALL proc_score_add(@ID, classId, 's08', 1, 3);
  CALL proc_score_add(@ID, classId, 's09', 1, 3);
  CALL proc_score_add(@ID, classId, 's10', 1, 3);
  CALL proc_score_add(@ID, classId, 's11', 1, 3);
  CALL proc_score_add(@ID, classId, 's12', 1, 3);
  CALL proc_score_add(@ID, classId, 's13', 1, 3);

  CALL proc_score_add(@ID, classId, 's01', 2, 3);
  CALL proc_score_add(@ID, classId, 's02', 2, 3);
  CALL proc_score_add(@ID, classId, 's03', 2, 3);
  CALL proc_score_add(@ID, classId, 's04', 2, 3);
  CALL proc_score_add(@ID, classId, 's05', 2, 3);
  CALL proc_score_add(@ID, classId, 's06', 2, 3);
  CALL proc_score_add(@ID, classId, 's07', 2, 3);
  CALL proc_score_add(@ID, classId, 's08', 2, 3);
  CALL proc_score_add(@ID, classId, 's09', 2, 3);
  CALL proc_score_add(@ID, classId, 's10', 2, 3);
  CALL proc_score_add(@ID, classId, 's11', 2, 3);
  CALL proc_score_add(@ID, classId, 's12', 2, 3);
  CALL proc_score_add(@ID, classId, 's13', 2, 3);

END
$$

DELIMITER ;

--
-- Create view `view_score_average`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_score_average
AS
SELECT
  `s`.`studentId` AS `studentId`,
  `s`.`classId` AS `classId`,
  `s`.`subjectId` AS `subjectId`,
  `s`.`semester` AS `semester`,
  `s`.`year` AS `year`,
  AVG(`s`.`oralTest` + `s`.`fifTest1` + `s`.`fifTest2` + `s`.`periodTest1` * 2 + `s`.`periodTest2` * 2 + `s`.`finalTest` * 3) / 10 AS `average`
FROM `scores` `s`
GROUP BY `s`.`studentId`,
         `s`.`classId`,
         `s`.`subjectId`,
         `s`.`semester`,
         `s`.`year`;

--
-- Create view `view_score`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_score
AS
SELECT
  `s`.`classId` AS `classId`,
  `s`.`studentId` AS `studentId`,
  `s1`.`studentCode` AS `studentCode`,
  `s1`.`lastName` AS `lastName`,
  CONCAT(`s1`.`lastName`, ' ', `s1`.`firstName`) AS `fullName`,
  `s1`.`firstName` AS `firstName`,
  `s`.`subjectId` AS `subjectId`,
  `s2`.`name` AS `subjectName`,
  `s`.`semester` AS `semester`,
  `s`.`oralTest` AS `oralTest`,
  `s`.`fifTest1` AS `fifTest1`,
  `s`.`fifTest2` AS `fifTest2`,
  `s`.`periodTest1` AS `periodTest1`,
  `s`.`periodTest2` AS `periodTest2`,
  `s`.`finalTest` AS `finalTest`,
  `s`.`year` AS `year`,
  `vsa`.`average` AS `average`
FROM (((`scores` `s`
  LEFT JOIN `view_score_average` `vsa`
    ON (`s`.`studentId` = `vsa`.`studentId`
    AND `s`.`classId` = `vsa`.`classId`
    AND `s`.`semester` = `vsa`.`semester`
    AND `s`.`year` = `vsa`.`year`
    AND `s`.`subjectId` = `vsa`.`subjectId`))
  LEFT JOIN `subjects` `s2`
    ON (`s`.`subjectId` = `s2`.`subjectId`))
  LEFT JOIN `students` `s1`
    ON (`s`.`studentId` = `s1`.`studentId`))
ORDER BY `s1`.`firstName` DESC;

DELIMITER $$

--
-- Create procedure `proc_score_getBySubject`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_score_getBySubject (IN classId char(36), IN subjectId char(3), IN semester smallint, IN year smallint, IN teacherId char(36))
BEGIN
  SELECT
    vs.classId,
    vs.studentId,
    vs.studentCode,
    vs.lastName,
    vs.fullName,
    vs.firstName,
    vs.subjectId,
    vs.subjectName,
    vs.semester,
    vs.oralTest,
    vs.fifTest1,
    vs.fifTest2,
    vs.periodTest1,
    vs.periodTest2,
    vs.finalTest,
    vs.year,
    vs.average,
    t.classId,
    t.teacherId,
    t.semester,
    t.year,
    t.subjectId,
    t1.teacherId,

    t1.subjectId,
    t1.teacherCode,
    c.classId,
    c.name,
    c.schoolYear
  FROM view_score vs
    INNER JOIN teacherclasses t
      ON vs.classId = t.classId
      AND vs.semester = t.semester
      AND vs.year = t.year
    INNER JOIN teachers t1
      ON t.teacherId = t1.teacherId
      AND vs.subjectId = t1.subjectId
    INNER JOIN classes c
      ON t.classId = c.classId
  WHERE t.teacherId = teacherId
  AND t.semester = semester
  AND t.year = year - c.schoolYear + 1
  AND c.classId = classId
  ;
END
$$

--
-- Create procedure `proc_score_getByStudent`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_score_getByStudent (IN studentId char(36), IN semester smallint, IN year smallint)
BEGIN
  SELECT
    *
  FROM view_score vs
  WHERE vs.studentId = studentId
  AND vs.semester = semester
  AND vs.year = year;

END
$$

--
-- Create procedure `proc_score_getByClass`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_score_getByClass (IN classId char(36), IN year smallint, IN semester smallint)
BEGIN
  SELECT
    *
  FROM view_score vs
  WHERE vs.classId = classId
  AND vs.year = year
  AND vs.semester = semester
  ORDER BY firstName DESC;
END
$$

DELIMITER ;

--
-- Create view `view_score_semester`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_score_semester
AS
SELECT
  `vs`.`studentId` AS `studentId`,
  `vs`.`studentCode` AS `studentCode`,
  `vs`.`lastName` AS `lastName`,
  `vs`.`fullName` AS `fullName`,
  `vs`.`firstName` AS `firstName`,
  `vs`.`classId` AS `classId`,
  `vs`.`semester` AS `semester`,
  `vs`.`year` AS `year`,
  ROUND(AVG(`vs`.`average`), 1) AS `semesterAverage`
FROM `view_score` `vs`
WHERE `vs`.`subjectId` <> 's12'
GROUP BY `vs`.`studentId`,
         `vs`.`semester`,
         `vs`.`year`;

DELIMITER $$

--
-- Create procedure `proc_score_semesterAverage`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_score_semesterAverage (IN classId char(36), IN semester smallint, IN year smallint)
BEGIN
  SELECT
    *
  FROM view_score_semester vss
  WHERE vss.classId = classId
  AND vss.semester = semester
  AND vss.year = year;
END
$$

DELIMITER ;

--
-- Create table `users`
--
CREATE TABLE users (
  userId char(36) NOT NULL DEFAULT '',
  name varchar(50) NOT NULL DEFAULT '',
  username varchar(50) NOT NULL DEFAULT '',
  email varchar(50) NOT NULL DEFAULT '',
  password varchar(50) NOT NULL DEFAULT '',
  level smallint(6) NOT NULL,
  avata varchar(50) DEFAULT NULL,
  PRIMARY KEY (userId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create index `email` on table `users`
--
ALTER TABLE users
ADD UNIQUE INDEX email (email);

--
-- Create index `username` on table `users`
--
ALTER TABLE users
ADD UNIQUE INDEX username (username);

DELIMITER $$

--
-- Create procedure `proc_user_updatePassword`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_user_updatePassword (IN userId char(36), IN newPassword varchar(50), IN oldPassword varchar(50))
BEGIN
  UPDATE users u
  SET password = newPassword
  WHERE u.userId = userId
  AND u.password = oldPassword;

END
$$

--
-- Create procedure `proc_user_update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_user_update (IN userId char(36), IN name varchar(50), IN userName varchar(50), IN email varchar(50), IN password varchar(50), IN level int)
BEGIN
  IF ISNULL(password) THEN
    UPDATE users u
    SET u.name = name,
        u.username = userName,
        u.email = email,
        u.password = u.password,
        u.level = level
    WHERE u.userId = userId;
  ELSE
    UPDATE users u
    SET u.name = name,
        u.username = userName,
        u.email = email,
        u.password = password,
        u.level = level
    WHERE u.userId = userId;
  END IF;
END
$$

--
-- Create procedure `proc_user_getById`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_user_getById (IN userId char(36))
BEGIN
  SELECT
    *
  FROM users u
  WHERE u.userId = userId;
END
$$

--
-- Create procedure `proc_user_getAll`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_user_getAll ()
BEGIN
  SELECT
    *
  FROM users u;
END
$$

--
-- Create procedure `proc_user_del`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_user_del (IN userId char(36))
BEGIN
  DELETE
    FROM users
  WHERE users.userId = userId;
END
$$

--
-- Create procedure `proc_user_avata`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_user_avata (IN userId char(36), IN avata varchar(50))
BEGIN
  UPDATE users u
  SET u.avata = avata
  WHERE u.userId = userId;
END
$$

--
-- Create procedure `proc_user_add`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_user_add (IN name varchar(50), IN userName varchar(50), IN email varchar(50), IN password varchar(50), IN level smallint)
BEGIN
  INSERT INTO users
    VALUE (UUID(), name, userName, email, password, level);
END
$$

--
-- Create procedure `proc_login`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_login (IN login varchar(255), IN password varchar(255))
BEGIN
  SELECT
    u.userId,
    u.name,
    u.username,
    u.email,
    u.level,
    u.avata
  FROM users u
  WHERE password = u.password
  AND (login = u.email
  OR login = u.username);
END
$$

DELIMITER ;

--
-- Create view `view_users`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_users
AS
SELECT
  `users`.`userId` AS `userId`,
  `users`.`name` AS `name`,
  `users`.`username` AS `username`,
  `users`.`email` AS `email`,
  `users`.`password` AS `password`,
  `users`.`level` AS `level`,
  `users`.`avata` AS `avata`
FROM `users`;

-- 
-- Dumping data for table subjects
--
INSERT INTO subjects VALUES
('s01', 'T', 'Toán', 0),
('s02', 'VL', 'Vật lý', 0),
('s03', 'HH', 'Hoá học', 0),
('s04', 'SH', 'Sinh học', 0),
('s05', 'TH', 'Tin Học', 0),
('s06', 'NV', 'Ngữ Văn', 0),
('s07', 'LS', 'Lịch sử', 0),
('s08', 'ĐL', 'Địa lý', 0),
('s09', 'TA', 'Tiếng Anh', 0),
('s10', 'GDCD', 'Giáo dục công dân', 0),
('s11', 'CN', 'Công nghệ', 0),
('s12', 'TD', 'Thể dục', 1),
('s13', 'QPAN', 'Quốc phòng an ninh', 0);

-- 
-- Dumping data for table classes
--
INSERT INTO classes VALUES
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 'A1', 2020),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', 'A3', 2020),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', 'A4', 2020);

-- 
-- Dumping data for table teachers
--
INSERT INTO teachers VALUES
('b842f090-99fc-11ee-80bc-4ae3953e7697', 'Đức', 'Trần Văn', '0987654321', 'tranvanduc@gmail.com', 's01', 105, '1234', 'b842f090-99fc-11ee-80bc-4ae3953e7697.jpg');

-- 
-- Dumping data for table students
--
INSERT INTO students VALUES
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'Dương', 'Nguyễn Văn', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', '2005-01-01', 000161, 0, '', '0337273658', '', '', '', '', ''),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'Đức', 'Nguyễn Văn', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', '2005-01-01', 000162, 0, '', '', '', '', 'Kinh', '', '');

-- 
-- Dumping data for table users
--
INSERT INTO users VALUES
('097e9228-99da-11ee-80bc-4ae3953e7697', 'Nguyễn Văn Mạnh', 'nvmanh', 'nvmanh@gmail.com', '12345', 1, NULL),
('2cebd49a-8d1f-11ee-992a-1063c83412cc', 'Dương Nguyễn', 'nvduong', 'nvduong@email.com', '123456', 0, '2cebd49a-8d1f-11ee-992a-1063c83412cc.png');

-- 
-- Dumping data for table teacherclasses
--
INSERT INTO teacherclasses VALUES
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 'b842f090-99fc-11ee-80bc-4ae3953e7697', 1, 1, 's01'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's02'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's03'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's04'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's05'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's06'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's07'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's08'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's09'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's10'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's11'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's12'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's13'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's01'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's02'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's03'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's04'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's05'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's06'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's07'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's08'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's09'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's10'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's11'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's12'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's13'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 'b842f090-99fc-11ee-80bc-4ae3953e7697', 1, 2, 's01'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's02'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's03'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's04'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's05'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's06'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's07'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's08'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's09'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's10'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's11'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's12'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's13'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's01'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's02'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's03'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's04'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's05'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's06'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's07'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's08'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's09'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's10'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's11'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's12'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's13'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 'b842f090-99fc-11ee-80bc-4ae3953e7697', 1, 3, 's01'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's02'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's03'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's04'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's05'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's06'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's07'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's08'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's09'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's10'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's11'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's12'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's13'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's01'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's02'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's03'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's04'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's05'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's06'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's07'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's08'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's09'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's10'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's11'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's12'),
('cc28d9c4-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's13'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', 'b842f090-99fc-11ee-80bc-4ae3953e7697', 1, 1, 's01'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's02'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's03'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's04'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's05'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's06'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's07'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's08'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's09'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's10'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's11'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's12'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's13'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's01'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's02'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's03'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's04'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's05'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's06'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's07'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's08'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's09'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's10'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's11'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's12'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's13'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's01'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's02'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's03'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's04'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's05'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's06'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's07'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's08'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's09'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's10'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's11'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's12'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's13'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's01'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's02'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's03'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's04'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's05'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's06'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's07'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's08'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's09'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's10'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's11'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's12'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's13'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's01'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's02'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's03'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's04'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's05'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's06'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's07'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's08'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's09'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's10'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's11'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's12'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's13'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's01'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's02'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's03'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's04'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's05'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's06'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's07'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's08'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's09'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's10'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's11'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's12'),
('d02efcec-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's13'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's01'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's02'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's03'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's04'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's05'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's06'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's07'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's08'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's09'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's10'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's11'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's12'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 1, 's13'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's01'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's02'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's03'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's04'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's05'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's06'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's07'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's08'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's09'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's10'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's11'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's12'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 1, 's13'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's01'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's02'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's03'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's04'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's05'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's06'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's07'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's08'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's09'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's10'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's11'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's12'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 2, 's13'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's01'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's02'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's03'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's04'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's05'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's06'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's07'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's08'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's09'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's10'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's11'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's12'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 2, 's13'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's01'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's02'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's03'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's04'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's05'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's06'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's07'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's08'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's09'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's10'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's11'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's12'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 1, 3, 's13'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's01'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's02'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's03'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's04'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's05'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's06'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's07'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's08'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's09'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's10'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's11'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's12'),
('d20af06b-99ff-11ee-80bc-4ae3953e7697', NULL, 2, 3, 's13');

-- 
-- Dumping data for table scores
--
INSERT INTO scores VALUES
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's01', 1, 9, 9, 10, 9, 10, 8, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's01', 1, 9, 3, 6, 10, 10, 2, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's01', 1, 3, 10, 9, 3, 10, 8, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's01', 2, 3, 9, 3, 1, 2, 10, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's01', 2, 1, 10, 8, 7, 1, 5, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's01', 2, 3, 8, 10, 5, 3, 1, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's02', 1, 8, 4, 9, 1, 8, 6, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's02', 1, 8, 2, 8, 1, 3, 2, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's02', 1, 9, 3, 8, 8, 8, 6, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's02', 2, 2, 8, 3, 3, 6, 10, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's02', 2, 1, 8, 9, 1, 6, 9, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's02', 2, 5, 3, 9, 7, 7, 1, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's03', 1, 4, 4, 5, 5, 9, 10, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's03', 1, 9, 8, 2, 5, 8, 7, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's03', 1, 3, 9, 5, 7, 1, 2, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's03', 2, 1, 7, 8, 9, 1, 7, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's03', 2, 4, 2, 9, 8, 3, 10, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's03', 2, 5, 10, 5, 5, 1, 7, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's04', 1, 1, 7, 10, 9, 6, 9, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's04', 1, 8, 1, 2, 3, 9, 8, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's04', 1, 8, 3, 10, 1, 3, 4, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's04', 2, 3, 1, 6, 8, 9, 1, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's04', 2, 10, 9, 3, 10, 8, 10, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's04', 2, 4, 8, 7, 1, 1, 5, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's05', 1, 9, 8, 2, 7, 7, 3, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's05', 1, 9, 4, 1, 3, 1, 4, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's05', 1, 9, 2, 4, 3, 2, 1, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's05', 2, 8, 7, 9, 3, 8, 10, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's05', 2, 7, 2, 10, 5, 2, 5, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's05', 2, 1, 8, 8, 5, 2, 1, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's06', 1, 6, 9, 8, 9, 4, 2, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's06', 1, 8, 7, 10, 8, 9, 10, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's06', 1, 9, 9, 10, 1, 6, 4, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's06', 2, 8, 7, 2, 7, 8, 8, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's06', 2, 9, 7, 10, 9, 5, 7, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's06', 2, 2, 6, 3, 8, 10, 5, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's07', 1, 7, 9, 4, 1, 5, 1, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's07', 1, 4, 10, 6, 2, 10, 5, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's07', 1, 4, 6, 7, 9, 2, 1, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's07', 2, 5, 10, 6, 1, 6, 8, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's07', 2, 10, 7, 6, 6, 3, 6, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's07', 2, 4, 6, 5, 8, 4, 5, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's08', 1, 8, 7, 9, 5, 8, 4, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's08', 1, 3, 1, 5, 10, 4, 2, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's08', 1, 10, 7, 6, 6, 1, 7, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's08', 2, 10, 7, 2, 1, 9, 9, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's08', 2, 2, 9, 9, 7, 9, 5, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's08', 2, 2, 6, 2, 1, 9, 3, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's09', 1, 6, 7, 8, 8, 5, 10, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's09', 1, 7, 9, 3, 9, 6, 3, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's09', 1, 1, 3, 4, 1, 9, 4, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's09', 2, 9, 7, 6, 9, 8, 3, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's09', 2, 4, 7, 1, 5, 9, 1, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's09', 2, 7, 4, 8, 7, 10, 9, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's10', 1, 5, 3, 9, 5, 10, 3, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's10', 1, 6, 1, 7, 9, 6, 10, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's10', 1, 3, 3, 4, 2, 8, 4, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's10', 2, 9, 4, 6, 5, 6, 6, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's10', 2, 7, 10, 9, 6, 2, 1, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's10', 2, 4, 1, 4, 7, 10, 2, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's11', 1, 6, 10, 10, 10, 9, 6, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's11', 1, 3, 4, 1, 1, 2, 5, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's11', 1, 6, 9, 3, 8, 10, 7, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's11', 2, 1, 7, 10, 9, 5, 9, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's11', 2, 10, 7, 5, 1, 9, 1, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's11', 2, 6, 7, 3, 6, 8, 4, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's12', 1, 4, 8, 10, 3, 7, 3, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's12', 1, 1, 10, 8, 6, 7, 7, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's12', 1, 3, 4, 9, 4, 3, 3, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's12', 2, 7, 9, 3, 8, 10, 6, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's12', 2, 8, 9, 7, 10, 8, 1, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's12', 2, 5, 1, 10, 7, 6, 6, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's13', 1, 3, 6, 2, 1, 9, 2, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's13', 1, 2, 10, 2, 9, 1, 5, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's13', 1, 6, 2, 9, 8, 4, 3, 3),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's13', 2, 1, 6, 5, 7, 8, 1, 1),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's13', 2, 10, 6, 1, 5, 3, 9, 2),
('4b373afd-9a3a-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's13', 2, 1, 8, 7, 8, 1, 9, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's01', 1, 8, 7, 9, 1, 10, 7, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's01', 1, 2, 2, 1, 9, 3, 6, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's01', 1, 10, 8, 9, 3, 5, 6, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's01', 2, 5, 2, 3, 9, 6, 3, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's01', 2, 6, 2, 9, 7, 10, 7, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's01', 2, 2, 10, 4, 10, 9, 5, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's02', 1, 4, 10, 6, 1, 6, 8, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's02', 1, 1, 6, 7, 7, 4, 10, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's02', 1, 6, 2, 9, 8, 3, 10, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's02', 2, 5, 7, 7, 6, 8, 9, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's02', 2, 7, 3, 3, 6, 2, 10, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's02', 2, 7, 9, 2, 2, 4, 3, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's03', 1, 1, 8, 7, 1, 5, 1, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's03', 1, 4, 1, 2, 8, 2, 6, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's03', 1, 1, 3, 1, 6, 8, 9, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's03', 2, 4, 1, 3, 2, 10, 3, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's03', 2, 3, 6, 9, 9, 7, 5, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's03', 2, 5, 4, 6, 7, 5, 5, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's04', 1, 8, 6, 7, 7, 5, 1, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's04', 1, 4, 2, 5, 1, 10, 8, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's04', 1, 2, 1, 8, 8, 4, 5, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's04', 2, 6, 10, 3, 3, 7, 3, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's04', 2, 4, 6, 6, 2, 3, 6, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's04', 2, 9, 8, 3, 1, 7, 2, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's05', 1, 9, 1, 7, 1, 5, 10, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's05', 1, 6, 7, 7, 3, 5, 3, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's05', 1, 5, 9, 10, 4, 7, 4, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's05', 2, 3, 5, 9, 7, 7, 5, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's05', 2, 4, 8, 8, 7, 10, 8, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's05', 2, 6, 4, 1, 3, 10, 1, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's06', 1, 3, 8, 10, 5, 4, 5, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's06', 1, 9, 7, 9, 2, 3, 8, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's06', 1, 7, 2, 7, 2, 7, 8, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's06', 2, 4, 4, 5, 5, 1, 7, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's06', 2, 2, 3, 9, 4, 2, 10, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's06', 2, 7, 9, 3, 7, 7, 3, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's07', 1, 1, 9, 10, 6, 9, 4, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's07', 1, 10, 7, 2, 9, 10, 4, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's07', 1, 10, 7, 1, 5, 1, 8, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's07', 2, 1, 3, 2, 9, 1, 8, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's07', 2, 3, 4, 1, 3, 9, 7, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's07', 2, 4, 9, 4, 1, 3, 10, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's08', 1, 5, 2, 3, 8, 10, 5, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's08', 1, 6, 10, 10, 1, 5, 10, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's08', 1, 7, 10, 7, 8, 7, 3, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's08', 2, 6, 5, 5, 1, 9, 2, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's08', 2, 7, 5, 1, 2, 8, 10, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's08', 2, 2, 8, 4, 4, 8, 8, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's09', 1, 6, 6, 8, 4, 6, 7, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's09', 1, 3, 5, 7, 7, 4, 9, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's09', 1, 10, 1, 3, 3, 6, 9, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's09', 2, 3, 9, 4, 2, 7, 1, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's09', 2, 7, 5, 2, 5, 10, 3, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's09', 2, 4, 6, 10, 8, 10, 8, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's10', 1, 5, 4, 4, 8, 9, 8, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's10', 1, 3, 9, 3, 8, 3, 7, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's10', 1, 6, 5, 7, 6, 1, 7, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's10', 2, 4, 4, 7, 5, 1, 10, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's10', 2, 5, 3, 3, 3, 6, 2, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's10', 2, 9, 1, 5, 2, 3, 10, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's11', 1, 3, 1, 6, 5, 7, 9, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's11', 1, 8, 8, 4, 5, 3, 8, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's11', 1, 10, 7, 6, 7, 6, 10, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's11', 2, 5, 7, 10, 9, 3, 7, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's11', 2, 9, 10, 2, 9, 7, 1, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's11', 2, 10, 9, 6, 2, 2, 4, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's12', 1, 6, 10, 1, 6, 6, 3, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's12', 1, 2, 7, 5, 7, 7, 3, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's12', 1, 3, 3, 6, 2, 10, 2, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's12', 2, 6, 10, 10, 8, 2, 3, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's12', 2, 10, 9, 4, 2, 6, 6, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's12', 2, 2, 6, 5, 7, 8, 9, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's13', 1, 6, 9, 6, 3, 6, 1, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's13', 1, 5, 6, 4, 10, 6, 3, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's13', 1, 10, 4, 9, 2, 2, 6, 3),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's13', 2, 8, 1, 1, 3, 2, 10, 1),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's13', 2, 1, 7, 9, 7, 6, 7, 2),
('ea2e1718-99ff-11ee-80bc-4ae3953e7697', 'cc28d9c4-99ff-11ee-80bc-4ae3953e7697', 's13', 2, 9, 7, 8, 10, 5, 6, 3);

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;